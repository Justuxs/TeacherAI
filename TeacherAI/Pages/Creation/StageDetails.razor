@page "/stagedetails/{subjectId}/{stageId}"
@using TeacherAI.Data;
@using TeacherAI.Service;
@inject SubjectService SubjectService

<h3>Stage Details</h3>

@if (stage != null)
{
    <div class="box-details">
        <h4>@stage.Name</h4>

        <table class="table">
            <thead>
                <tr>
                    <th>Topic Content</th>
                    <th>Keisti pozicija</th>
                    <th>Ištrinti</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var topic in stage.Topics)
                {
                    var index = stage.Topics.IndexOf(topic);
                    <tr>
                        <td>@topic.Content</td>
                        <td>
                            <div class="action-column">
                                @if (index != 0)
                                {
                                    <button @onclick="() => MoveTopicUp(topic)">Up</button>
                                }
                                @if (index != stage.Topics.Count - 1)
                                {
                                    <button @onclick="() => MoveTopicDown(topic)">Down</button>
                                }
                            </div>
                        </td>
                        <td>
                            <div class="action-column">
                                <button @onclick="() => DeleteTopic(topic)">Delete</button>
                            </div>
                        </td>

                    </tr>
                }
            </tbody>
        </table>

        <form @onsubmit="AddTopic">
            <input type="text" @bind="newTopicContent" />
            <button type="submit">Add Topic</button>
        </form>

    </div>
}
else
{
    <p>No stage found.</p>
    <form @onsubmit="AddTopic">
        <input type="text" @bind="newTopicContent" />
        <button type="submit">Add Topic</button>
    </form>
}

@code {
    [Parameter]
    public string subjectId { get; set; }
    [Parameter]
    public string stageId { get; set; }

    public long subjectId_ { get; set; }
    public long stageId_ { get; set; }

    private Stage stage;
    private string newTopicContent;
    private Topic editedTopic;
    private string editedTopicContent;
    private bool isEditModalOpen = false;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(subjectId) && long.TryParse(subjectId, out long subjectId_) && !string.IsNullOrEmpty(stageId) && long.TryParse(stageId, out long stageId_))
        {
            this.subjectId_ = subjectId_;
            this.stageId_ = stageId_;

            stage = await SubjectService.GetSubjectStageAsync(subjectId_, stageId_);
        }
        else
        {
            stage = null;
        }
    }

    private Stage GetStageDetailsById(int id)
    {
        var allStages = SubjectService.GenerateRandomSubjects(1, 2, 2);
        return allStages[0].Stages[0];
    }

    private void OpenEditModal(Topic topic)
    {
        editedTopic = topic;
        editedTopicContent = topic.Content;
        isEditModalOpen = true;
    }

    private async Task SaveEditedTopic()
    {
        editedTopic.Content = editedTopicContent;
        isEditModalOpen = false;
    }

    private void CloseEditModal()
    {
        isEditModalOpen = false;
    }

    private async Task DeleteTopic(Topic topic)
    {
        await SubjectService.DeleteTopicAsync(topic.Id);
        stage = await SubjectService.GetSubjectStageAsync(subjectId_, stageId_);
    }

    private async Task AddTopic()
    {
        if (!string.IsNullOrEmpty(newTopicContent))
        {
            var newTopic = new Topic { Content = newTopicContent };
            await SubjectService.AddTopicToStageAsync(stageId_, newTopic);
            stage = await SubjectService.GetSubjectStageAsync(subjectId_, stageId_);
            newTopicContent = string.Empty;
        }
    }

    private void MoveTopicUp(Topic topic)
    {
        var index = stage.Topics.IndexOf(topic);
        if (index > 0)
        {
            var temp = stage.Topics[index];
            stage.Topics.RemoveAt(index);
            stage.Topics.Insert(index - 1, temp);
        }
    }

    private void MoveTopicDown(Topic topic)
    {
        var index = stage.Topics.IndexOf(topic);
        if (index < stage.Topics.Count - 1)
        {
            var temp = stage.Topics[index];
            stage.Topics.RemoveAt(index);
            stage.Topics.Insert(index + 1, temp);
        }
    }
}

<style>
    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th,
        .table td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: center;
        }

        .table th {
            background-color: #f2f2f2;
            text-align: center;
        }

    .action-column button {
        margin-right: 5px;
    }
</style>
