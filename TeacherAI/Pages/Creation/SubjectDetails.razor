@page "/subjectdetails/{id}"
@using TeacherAI.Data;
@using TeacherAI.Service;

@inject SubjectService SubjectService
@inject NavigationManager NavigationManager

<h3>Subject Details</h3>

@if (subject != null)


{
    <div class="row">
        <div class="col-md-4">
            <button class="back-button" @onclick="GoBack">Back</button>
        </div>
        <div class="col-md-4 text-center">
            <input type="text" @bind="newStageName" />
            <button class="add-stage-button" @onclick="AddStage">Add Stage</button>
        </div>
        <div class="col-md-4 text-right">
            @if (deleteMode)
            {
                <button class="delete-button-active" @onclick="ToggleDeleteMode">Cancel Delete</button>
            }
            else
            {
                <button class="delete-button-inactive" @onclick="ToggleDeleteMode"><span>Delete Stages</span></button>
            }
        </div>
    </div>



    <div class="centered-container">
        <div class="subject-box">
            <h4>@subject.Name</h4>
            <div class="flex-container">
                @foreach (var stage in subject.Stages)
                {
                    <button class="transparent-button" @onclick="() => GoToStageDetails((int)stage.Id)">
                        <div class="subject-box">
                            <div class="flex-container @((deleteMode) ? "deleteMode" : "")">
                                <h4>@stage.Name</h4>
                            </div>
                        </div>
                    </button>
                }
            </div>
        </div>
    </div>


}
else
{
    <p>No subject found.</p>
}

@code {
    [Parameter]
    public string id { get; set; }

    private Subject subject;
    private bool deleteMode = false;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(id) && int.TryParse(id, out int subjectId))
        {
            subject = await SubjectService.GetSubjectFullAsync(subjectId);//GetSubjectDetailsById(subjectId);
        }
        else
        {
            subject = null;
        }
    }

    private string newStageName;

    private async Task AddStage()
    {
        if (!string.IsNullOrEmpty(newStageName))
        {
            var newStage = new Stage { Name = newStageName, SubjectID = subject.Id };
            await SubjectService.AddStageToSubjectAsync(subject.Id, newStage);
            newStageName = string.Empty;
            OnInitializedAsync();
        }
    }

    private async Task GoToStageDetails(long stageId)
    {
        if (deleteMode)
        {
            await SubjectService.DeleteStageFromSubjectAsync(subject.Id, stageId);
            OnInitializedAsync();
        }
        else
        {
            NavigationManager.NavigateTo($"/stagedetails/{stageId}");
        }
    }

    private Subject GetSubjectDetailsById(int id)
    {
        var allSubjects = SubjectService.GenerateRandomSubjects(1, 2, 2);
        return allSubjects[0];
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/subjects");
    }

    private void ToggleDeleteMode()
    {
        deleteMode = !deleteMode;
    }
}

<style>

    .deleteMode h4 {
        color: red;
    }

    input[type="text"] {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-bottom: 10px;
        width: 200px; /* Adjust the width as needed */
    }

    /* Buttons */
    button {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        margin-right: 10px;
    }

        button:hover {
            opacity: 0.8;
        }

        /* Add Stage Button */
        button.add-stage-button {
            background-color: #007bff;
            color: #fff;
        }

        button.delete-button-active,
        button.delete-button-inactive {
            background-color: #dc3545;
            color: #fff;
        }

            /* Delete Button Text */
            button.delete-button-active span,
            button.delete-button-inactive span {
                font-size: 14px;
            }

        /* Cancel Delete Button */
        button.delete-button-active {
            background-color: #ccc;
        }

        /* Adjust button margin as needed */
        button.delete-button-inactive {
            margin-left: 0;
        }

        /* Ensure Delete Buttons are on the same line */
        button.delete-button-active,
        button.delete-button-inactive {
            display: inline-block;
            vertical-align: middle;
        }

</style>
