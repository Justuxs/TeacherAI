@page "/subjects"
@using TeacherAI.Data;
@using TeacherAI.Service;
@inject SubjectService SubjectService
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-md-4">
        <h3>Mokymosi programos dalykai</h3>
    </div>
    <div class="col-md-4 text-center">
        <input type="text" @bind="newSubjectName" />
        <button class="add-stage-button" @onclick="AddSubject">Pridėti dalyką</button>
    </div>
    <div class="col-md-4 text-right">
        @if (deleteMode)
        {
            <button class="delete-button-active" @onclick="ToggleDeleteMode">Atšaukti ištrinymą</button>
        }
        else
        {
            <button class="delete-button-inactive" @onclick="ToggleDeleteMode"><span>Ištrinti dalyką</span></button>
        }
    </div>
</div>

@if (subjects == null)
{
    <div>Kraunasi...</div>
}
else
{

    <div class="flex-container">
        @foreach (var subject in subjects)
        {
            <button class="transparent-button" @onclick="() => GoToStageDetails((int)subject.Id)">
                <div class="subject-box">
                    <div class="flex-container @((deleteMode) ? "deleteMode" : "")">
                        <h4>@subject.Name</h4>
                    </div>
                </div>
            </button>
        }
    </div>
}


@code {
    private List<Subject> subjects;
    private string newSubjectName;
    private bool deleteMode = false;

    protected override async Task OnInitializedAsync()
    {
        subjects = await SubjectService.GetSubjectsAsync();
    }

    private async Task GoToStageDetails(long stageId)
    {
        if (deleteMode)
        {
            await DeleteSubject(stageId);
            OnInitializedAsync();
        }
        else
        {
            NavigationManager.NavigateTo($"/subjectdetails/{stageId}");
        }
    }

    private async Task DeleteSubject(long subjectId)
    {
        await SubjectService.DeleteSubjectAsync(subjectId);
        subjects = await SubjectService.GetSubjectsAsync();
    }

    private async Task AddSubject()
    {
        await SubjectService.AddSubjectAsync(newSubjectName);
        subjects = await SubjectService.GetSubjectsAsync();
    }

    private void ToggleDeleteMode()
    {
        deleteMode = !deleteMode;
    }
}

<style>

    .deleteMode h4 {
        color: red;
    }

    input[type="text"] {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-bottom: 10px;
        width: 200px; /* Adjust the width as needed */
    }

    /* Buttons */
    button {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        margin-right: 10px;
    }

        button:hover {
            opacity: 0.8;
        }

        /* Add Stage Button */
        button.add-stage-button {
            background-color: #007bff;
            color: #fff;
        }

        button.delete-button-active,
        button.delete-button-inactive {
            background-color: #dc3545;
            color: #fff;
        }

            /* Delete Button Text */
            button.delete-button-active span,
            button.delete-button-inactive span {
                font-size: 14px;
            }

        /* Cancel Delete Button */
        button.delete-button-active {
            background-color: #ccc;
        }

        /* Adjust button margin as needed */
        button.delete-button-inactive {
            margin-left: 0;
        }

        /* Ensure Delete Buttons are on the same line */
        button.delete-button-active,
        button.delete-button-inactive {
            display: inline-block;
            vertical-align: middle;
        }

</style>