@page "/teach"
@using TeacherAI.Data;
@using TeacherAI.Pages.Teaching.Components
@using TeacherAI.Service;
@inject SubjectService SubjectService
@inject AIService AIService

<head>
    <link rel="stylesheet" href="~/css/spining.css" />
</head>

<style>
    /* Add your custom styles here */
    .container {
        max-width: 800px;
        margin: auto;
    }

    .row {
        display: flex;
        justify-content: space-between;
    }

    .column-left,
    .column-mid,
    .column-right {
        width: 30%;
    }

    .button-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .button {
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        border: none;
        cursor: pointer;
    }

        .button:hover {
            background-color: #0056b3;
        }

    .select-box {
        width: 100%;
        padding: 8px;
    }

    .selection-row {
        margin-bottom: 20px;
    }

    .selection-box {
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
    }

    .info {
        background-color: #f9f9f9;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
    }

    .selected-info span::before {
        content: '\2192'; /* Unicode character for right arrow */
        margin-right: 5px; /* Adjust spacing between arrow and text */
        text-align: center;
        color: #007bff; /* Change arrow color to blue, you can use any color code */
    }

    .learning-container {
        margin-top: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 20px;
        min-height: 70vh;
    }

    .text-area {
        width: 100%;
        height: 65vh;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-bottom: 10px;
    }

    .input {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

</style>



<div class="@(_isGenerating ? "spinning-gradient" : "non-spinning-gradient")">
    @if (subjects != null)
    {
        <div class="text-center">
            <h3>Mokymasis</h3>
        </div>

        @if (errorShow)
        {
            <div class="text-center">
                <h2 class="alert-danger">Nepavyko susiekti su AI servizu</h2>
            </div>
        }

        <div class="row">

            @if (!selectingSubject)
            {
                <div class="column-left">
                    <button @onclick="Reset" class="beautiful-button">Atgal</button>
                </div>
            }

            @if (selectedSubject != null)
            {
                <div class="column-mid">

                    <div class="info">
                        @if (selectedSubject != null && selectedStage == null && selectedTopic == null)
                        {
                            <div class="selected-info">
                                <span>@selectedSubject.Name</span>
                            </div>
                        }

                        @if (selectedSubject != null && selectedStage != null && selectedTopic == null)
                        {
                            <div class="selected-info">
                                <span>@selectedSubject.Name</span>
                                <span>@selectedStage.Name</span>
                            </div>
                        }

                        @if (selectedSubject != null && selectedStage != null && selectedTopic != null)
                        {
                            <div class="selected-info">
                                <span>@selectedSubject.Name</span>
                                <span>@selectedStage.Name</span>
                                <span>@selectedTopic.Content</span>
                            </div>
                        }
                    </div>
                </div>

                <div class="column-right"></div>
            }
        </div>

        <div class="container text-center border-3">
            @if (!learningStarted && !isSelectionDone())
            {
                <h4 class="py-2">Dalyko pasirinkimas</h4>
            }

            @if (!learningStarted && selectingSubject)
            {
                <div class="selection-row">
                    <div class="selection-box">
                        <h4>Pasirinkti dalyką</h4>
                        <select class="select-box" @onchange="HandleSubjectSelection">
                            <option value="" disabled selected hidden>-- Pasirink dalyką --</option>
                            @foreach (var subject in subjects)
                            {
                                <option value="@subject.Name">@subject.Name</option>
                            }
                        </select>
                    </div>
                </div>
            }

            @if (!learningStarted && selectingStage)
            {
                selectingSubject = false;
                <div class="selection-row">
                    <div class="selection-box">
                        <h4>Pasirinkti skyrių</h4>
                        <select class="select-box" @onchange="HandleStageSelection">
                            <option value="" disabled selected hidden>-- Pasirink skyrių --</option>
                            @foreach (var stage in stages)
                            {
                                <option value="@stage.Name">@stage.Name</option>
                            }
                        </select>
                    </div>
                </div>
            }

            @if (!learningStarted && selectingTopic)
            {
                <div class="selection-row">
                    <div class="selection-box">
                        <h4>Pasirinkti temą</h4>
                        <select class="select-box" @onchange="HandleTopicSelection">
                            <option value="" disabled selected hidden>-- Pasirink temą --</option>
                            @foreach (var topic in topics)
                            {
                                <option value="@topic.Content">@topic.Content</option>
                            }
                        </select>
                    </div>
                </div>
            }

            @if (isSelectionDone() && !learningStarted)
            {
                <div class="button-container centered-container align-items-center h-50">
                    <button @onclick="BeginLearning" class="beautiful-button">Mokytis</button>
                </div>
            }

            @if (learningStarted && !quizShow)
            {
                <div class="learning-container modal-fullscreen-xl-down">


                    <ChatComponent Chat="@SessionChat"></ChatComponent>
                    <div class="dropdown">

                        <div class="container mt-4">
                            <div class="input-group">
                                <input type="text" class="form-control" placeholder="Klausti mokytojo" @bind="message" @onkeydown="HandleKeyDown" />  
                                <div class="input-group-append">
                                    <button class="btn btn-success" @onclick="AskQuestion" id="sendButton">Klausti</button>
                                </div>
                            </div>
                        </div>

                        <div class="button-container">
                            <button class="beautiful-button" @onclick="GenerateContent">Generuoti medžiagą toliau</button>
                            <button class="beautiful-button" @onclick="GenerateQuiz">Spresti testą</button>
                        </div>
                    </div>
                </div>
            }
            @if (quizShow && learningStarted)
            {
                <QuizComponent EndQuiz=@HandleEndQuiz DoLoading=@DoLoading AIService="AIService" NextQuiz=@HandleNextQuiz />
            }

        </div>
    }
    else
    {
        <div>Loading...</div>
    }

</div>

@code {
    private List<Subject> subjects;
    private List<Stage> stages;
    private List<Topic> topics;

    private Subject selectedSubject;
    private Stage selectedStage;
    private Topic selectedTopic;

    private bool selectionDone = false;
    private bool quizShow = false;
    private bool errorShow = false;
    private bool _isGenerating = false;

    private bool selectingSubject = true;
    private bool selectingStage = false;
    private bool selectingTopic = false;

    private bool learningStarted = false;

    private Chat SessionChat;
    string message = string.Empty;
    int maxLength = 100;



    protected override async Task OnInitializedAsync()
    {
        subjects = await SubjectService.GetSubjectsFullAsync();
    }

    void HandleSubjectSelection(ChangeEventArgs e)
    {
        var subjectName = e.Value.ToString();
        Subject subject = subjects.FirstOrDefault(s => s.Name == subjectName);
        string message = string.Empty;

        if (subject != null)
        {
            stages = subject.Stages;
            selectedSubject = subject;
            selectingSubject = false;
            selectingStage = true;
        }
    }
    void HandleStageSelection(ChangeEventArgs e)
    {
        var stageName = e.Value.ToString();
        Stage stage = stages.FirstOrDefault(s => s.Name == stageName);

        if (stage != null)
        {
            topics = stage.Topics;
            selectedStage = stage;
            selectingStage = false;
            selectingTopic = true;
        }
    }
    void HandleTopicSelection(ChangeEventArgs e)
    {
        var topicName = e.Value.ToString();
        Topic topic = topics.FirstOrDefault(s => s.Content == topicName);

        if (topic != null)
        {
            selectedTopic = topic;
            selectingTopic = false;
        }
    }

    bool isSelectionDone()
    {
        return (selectedTopic != null && selectedStage != null && selectedSubject != null);
    }

    private async Task BeginLearning()
    {
        AIService.SetParams(selectedSubject.Name, selectedStage.Name, selectedTopic.Content);

        await GenerateContent();
        learningStarted = true;
    }

    public async Task GenerateContent()
    {
        _isGenerating = true;

        if (await AIService.GenerateAIContent())
        {
            errorShow = false;
            SessionChat = AIService.GetChat();
        }
        else
        {
            errorShow = true;
        }

        _isGenerating = false;

    }

    public async Task GenerateQuiz()
    {
        _isGenerating = true;

        if (await AIService.GenerateQuizWithRetries())
        {
            errorShow = false;
            quizShow = true;
        }
        else
        {
            errorShow = true;
        }

        _isGenerating = false;
    }

    private void Reset()
    {
        stages = null;
        topics = null;

        selectedSubject = null;
        selectedStage = null;
        selectedTopic = null;

        selectionDone = false;
        selectingSubject = true;
        selectingStage = false;
        selectingTopic = false;
        learningStarted = false;
    }

    private void HandleEndQuiz(bool quizEnded)
    {
        _isGenerating = false;
        quizShow = false;
    }
    private async Task HandleNextQuiz(bool quizEnded)
    {
        //quizShow = false;
        await GenerateQuiz();
        quizShow = false;
        quizShow = true;
    }

    private void DoLoading(bool isDoing)
    {
        _isGenerating = isDoing;
        InvokeAsync(StateHasChanged);
    }

    async Task AskQuestion()
    {
        if (!String.IsNullOrEmpty(message))
        {
            _isGenerating = true;


            if (await AIService.GenerateAnswerContent(message))
            {
                errorShow = false;
                SessionChat = AIService.GetChat();
            }
            else
            {
                errorShow = true;
            }

            _isGenerating = false;
            message = string.Empty;
        }
    }
    async Task HandleKeyDown(KeyboardEventArgs e){

        if (e.Key == "Enter")
        {
            if (string.IsNullOrEmpty(message))
            {
                return;
            }
            _isGenerating = true;


            if (await AIService.GenerateAnswerContent(message))
            {
                errorShow = false;
                SessionChat = AIService.GetChat();
            }
            else
            {
                errorShow = true;
            }

            _isGenerating = false;

            message = string.Empty;
        }
        else if (message.Length >= 100 && e.Key != "Backspace")
        {
            message = message.Substring(0, Math.Min(message.Length, maxLength));
        }
        
    }
}
